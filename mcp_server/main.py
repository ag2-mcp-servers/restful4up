# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:57:16+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import UploadFile

from models import (
    ApplyYaraRulesPostResponse,
    EmulationOutputPostResponse,
    Error,
    GeneratePartialYaraRulesPostResponse,
)

app = MCPProxy(
    description='RESTful API 4 Unipacker',
    title='RESTful4Up',
    version='1.0.0',
    servers=[{'url': 'http://restful4up.local'}, {'url': '/v1'}],
)


@app.post(
    '/apply-yara-rules',
    description=""" apply given YARA rules to the given executable. (upto 10 rules) """,
    tags=['file_handling_operations'],
)
def apply_yara_rules(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/clean',
    description=""" clean up the uploaded files """,
    tags=['file_handling_operations'],
)
def clean():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/emulation-output',
    description=""" try to get the emulation output after unpacking the file """,
    tags=['file_handling_operations'],
)
def emulation_output(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/generate-partial-yara-rules',
    description=""" generate partial YARA rules for give executable. (Rule without the condition section) """,
    tags=['file_handling_operations'],
)
def generate_partial_yara_rule(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/unpack',
    description=""" try to unpack the given file """,
    tags=['file_handling_operations'],
)
def unpack(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
